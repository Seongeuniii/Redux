import { createStore } from "redux";

const divToggle = document.querySelector(".toggle");
const counter = document.querySelector("h1");
const btnIncrease = document.querySelector("#increase");
const btnDecrease = document.querySelector("#decrease");

// Action 이름
const TOGGLE_SWITCH = "TOGGLE_SWITCH";
const INCREASE = "INCREASE";
const DECREASE = "DECREASE";

// Action 생성 함수
const toggleSwitch = () => ({ type: TOGGLE_SWITCH });
const increase = (difference) => ({ type: INCREASE, difference });
const decrease = () => ({ type: DECREASE });

// 초기값
const initialState = {
    toggle: false,
    counter: 0,
};

// Reducer
// 상태에 변화를 일으키는 함수 : 현재 상태와 전달 받은 액션 객체를 파라미터로 받아와 두 값을 참고하여 새로운 상태를 만들어 반환
function reducer(state = initialState, action) {
    switch (action.type) {
        case TOGGLE_SWITCH:
            return {
                ...state,
                toggle: !state.toggle,
            };
        case INCREASE:
            return {
                ...state,
                counter: state.counter + action.difference,
            };
        case DECREASE:
            return {
                ...state,
                counter: state.counter - 1,
            };
        default:
            return state;
    }
}

// Store
const store = createStore(reducer);

// render
const render = () => {
    const state = store.getState();

    if (state.toggle) {
        divToggle.classList.add("active");
    } else {
        divToggle.classList.remove("active");
    }

    counter.innerText = state.counter;
};

// subscribe
// 파라미터 함수는 액션이 디스패치되어 상태가 업데이트될 때마다 호출
store.subscribe(render);

// dispatch
// 액션을 발생시키는 것 : 이 함수가 실행되면 스토어는 리듀서 함수를 실행시켜 상태 업데이트
// 상태에 변화가 필요할 때 액션 발생 : 객체 형태(상태 업데이트 시 참고할 값)
divToggle.onclick = () => {
    store.dispatch(toggleSwitch());
};
btnIncrease.onclick = () => {
    store.dispatch(increase(1));
};
btnDecrease.onclick = () => {
    store.dispatch(decrease());
};